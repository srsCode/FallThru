buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven/'}
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
plugins { id 'org.ajoberstar.reckon' version '0.11.0' }
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'
if (file('../.etc/srscode-MC.gradle').exists()) { apply from:'../.etc/srscode-MC.gradle' }

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

reckon {
    scopeFromProp()
    stageFromProp('dev', 'rc', 'final')
}

checkstyle {
    setConfig resources.text.fromUri('https://srscode.github.io/checkstyle/srsCode-MC-checkstyle.xml')
    setReportsDir file("${project.buildDir}/reports/checkstyle")
    setToolVersion '8.16'
}
tasks.withType(Checkstyle) {
    reports.xml.enabled false
    reports.html.enabled true
}

def mixin_file = 'fallthru.mixins.json'
minecraft {
    mappings channel: project.mapping_channel, version: '20200820-1.16.1'
    runs {
        client {
            taskName 'fallthruClient'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug.export', 'true'
            property 'fml.earlyprogresswindow', 'false'
            arg "-mixin.config=${mixin_file}" as String
            mods {self {source sourceSets.main}}
        }
        server {
            taskName 'fallthruServer'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug.export', 'true'
            property 'fml.earlyprogresswindow', 'false'
            arg "-mixin.config=${mixin_file}" as String
            mods {self {source sourceSets.main}}
        }
    }
}

repositories {
    maven { url = 'http://repo.spongepowered.org/maven/'}
    // temporary for latest mappings via gigaherz
    maven { url = 'https://www.dogforce-games.com/maven/'}
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.1-SNAPSHOT:processor'
}

def timestamp = java.time.OffsetDateTime.now() as String
setGroup 'de.srsco'
jar {
    from 'LICENCE.txt'
    manifest.attributes([
        'Specification-Vendor'    : "${project.vendor}",
        'Specification-Title'     : "${project.name}",
        'Specification-Version'   : '1',
        'Implementation-Vendor'   : "${project.vendor}",
        'Implementation-Title'    : "${project.name}",
        'Implementation-Version'  : "${project.version}",
        'Implementation-Timestamp': timestamp,
        'MixinConfigs'            : mixin_file,
        'Maven-Artifact'          : "${project.group}:${archivesBaseName}:${project.version}"
    ])
}

publish.dependsOn(jar)
publishing {
    publications {
        fallthru(MavenPublication) {
            groupId = project.group
            artifact jar
            pom {
                artifactId = project.archivesBaseName
                name = project.name
            }
        }
    }
    repositories {
        maven {
            // only publish to local maven for now
            mavenLocal()
        }
    }
}
